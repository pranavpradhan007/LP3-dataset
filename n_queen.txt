











































def is_valid(board, row, col, n):
    for i in range(row):
        if board[i] == col or abs(board[i] - col) == abs(i - row):
            return False
    return True

def backtrack(board, row, n):
    if row == n:
        return True
    else:
        for col in range(n):
            if is_valid(board, row, col, n):
                board[row] = col
                if backtrack(board, row + 1, n):
                    return True
                board[row] = -1

def print_board(board):
    n = len(board)
    for row in range(n):
        for col in range(n):
            if col == board[row]:
                print("Q ", end="")
            else:
                print(". ", end="")
        print()

n = int(input("Enter the number of queens: "))
if n < 4:
    print("No solution found as the board size is too small.")
else:
    board = [-1] * n
    first_queen_column = int(input(f"Enter the column for the first queen (0-based index, valid range: 0-{n-1}): "))
    if first_queen_column < 0 or first_queen_column >= n:
        print("No solution found as the index exceeded the valid range.")
    else:
        board[0] = first_queen_column
        if backtrack(board, 1, n):
            print("Solution found:")
            print_board(board)
        else:
            print("No solution found.")

----------------

The provided code solves the N-Queens problem using backtracking. Here are the time and space complexities for this code:

1. **Time Complexity:**

   The time complexity of the backtracking algorithm can vary significantly depending on the problem instance (the size of the chessboard). In the worst case, where there is no solution or where there are multiple solutions, the algorithm may explore a substantial number of possibilities before finding the solution or determining that no solution exists. Therefore, the time complexity is highly dependent on the specific problem instance.

   However, for a standard N-Queens problem, where a solution exists, the time complexity is generally considered to be high but polynomial. It can be roughly approximated as O(N!), where N is the number of queens (and the size of the chessboard). This is because the algorithm explores various possibilities, and in each step, it considers N choices for the placement of a queen.

2. **Space Complexity:**

   The space complexity is determined by the storage required for the chessboard and the recursive call stack. 

   - The space required for the chessboard is O(N^2) because it is an N x N board.
   - The space complexity due to the recursive call stack depends on the depth of the recursion. In the worst case, it can go as deep as N levels. Therefore, the space complexity due to the call stack is O(N).

   The dominant factor in the space complexity is the chessboard itself, so the overall space complexity is O(N^2).

The time complexity of the N-Queens problem can be very high for larger board sizes, and the algorithm's efficiency depends on early pruning techniques and optimizations. This code is a basic backtracking solution for the N-Queens problem and may not be efficient for large N. More advanced techniques, such as constraint propagation and additional heuristics, can significantly improve the algorithm's performance for larger problem instances.