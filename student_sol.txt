





































// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract StudentRegistry {
struct Student {
string name;
uint256 age;
}
mapping(address => Student) public students;
address[] public studentAddresses;
event StudentAdded(address indexed studentAddress, string name,
uint256 age);
// Fallback function
receive() external payable {
revert("This contract does not accept Ether.");
}
function addStudent(string memory name, uint256 age) public {
require(age > 0, "Age must be greater than 0");
require(bytes(name).length > 0, "Name cannot be empty");
students[msg.sender] = Student(name, age);
studentAddresses.push(msg.sender);
emit StudentAdded(msg.sender, name, age);
}
function getStudent() public view returns (string memory name,
uint256 age) {
require(bytes(students[msg.sender].name).length > 0, "Student not found");
return (students[msg.sender].name, students[msg.sender].age);
}
function getTotalStudentCount() public view returns (uint256) {
return studentAddresses.length;
}
}



// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    struct Student {
        string name;
        uint256 rollNumber;
        uint256 age;
    }

    Student[] public students;  // Array to store student records

    // Fallback function that accepts ether (fallback is optional)
    receive() external payable {
        // Custom logic can be implemented here
    }

    // Add a new student record
    function addStudent(string memory _name, uint256 _rollNumber, uint256 _age) public {
        Student memory newStudent = Student(_name, _rollNumber, _age);
        students.push(newStudent);
    }

    // Get the total number of student records
    function getStudentCount() public view returns (uint256) {
        return students.length;
    }

    // Get student information by index
    function getStudent(uint256 index) public view returns (string memory, uint256, uint256) {
        require(index < students.length, "Index out of bounds");
        Student memory student = students[index];
        return (student.name, student.rollNumber, student.age);
    }
}


The provided Solidity code defines a smart contract called `StudentRegistry` that allows you to store and retrieve information about students. Let's break down the code step by step and explain each part:

1. SPDX-License-Identifier: MIT: This is a comment indicating the license under which the smart contract code is released.

2. `pragma solidity ^0.8.0;`: This specifies the version of the Solidity compiler that should be used to compile the code. In this case, it's set to version 0.8.0 or later.

3. `contract StudentRegistry { ... }`: This defines the `StudentRegistry` smart contract. All the functionality and data structures are contained within this contract.

4. `struct Student { ... }`: This defines a structure called `Student` to represent the data of a student. It includes two fields: `name` (a string) and `age` (a uint256).

5. `mapping(address => Student) public students;`: This is a mapping that associates Ethereum addresses with `Student` structures. It allows you to look up student information by their Ethereum address.

6. `address[] public studentAddresses;`: This is a dynamic array of Ethereum addresses that keeps track of all the addresses that have been added as students. It provides a way to iterate through the list of students.

7. `event StudentAdded(...);`: This is an Ethereum event that is emitted when a new student is added. It logs the student's Ethereum address, name, and age. Events are used to record important information on the Ethereum blockchain for later retrieval.

8. `receive() external payable { ... }`: This is a fallback function. It's used to handle incoming Ether (ether sent to the contract), but it reverts with an error message, indicating that this contract doesn't accept Ether. Fallback functions are optional and can be used to implement custom logic when Ether is sent to the contract.

9. `function addStudent(string memory name, uint256 age) public { ... }`: This function is used to add a new student to the registry. It takes the student's name and age as parameters and associates them with the sender's Ethereum address. It also emits a `StudentAdded` event. It includes some basic validation checks for age and name.

10. `function getStudent() public view returns (string memory name, uint256 age) { ... }`: This function allows a student to retrieve their own information by calling the function. It returns the name and age associated with the sender's Ethereum address.

11. `function getTotalStudentCount() public view returns (uint256) { ... }`: This function returns the total number of students in the registry by returning the length of the `studentAddresses` array.

In summary, the `StudentRegistry` contract allows you to add, retrieve, and count student records using Ethereum addresses as identifiers. When a new student is added, an event is emitted to record the addition. The contract doesn't accept Ether, as indicated by the fallback function.